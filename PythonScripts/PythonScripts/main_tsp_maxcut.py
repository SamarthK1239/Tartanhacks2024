from TSP import *
from max_cut import *
import networkx as nx
import numpy as np

n = int(input("Number of trucks in fleet:: "))
numberoftrucks = n
clusters = []

def main(graph):    
    global numberoftrucks, clusters
    clusters += [list(graph.nodes())]

    while len(clusters) < numberoftrucks:
        biggest = biggest_cluster(clusters)
        biggest = clusters.pop(biggest)

        split, nodes = main_max_cut(graph.subgraph(biggest))
        left, right = [], []
        for i in range(len(split)):
            if split[i] == 0:
                left += [nodes[i]]
            else:
                right += [nodes[i]]
        clusters += [right]
        clusters += [left]
    
    for i in clusters:
        yield main_tsp(graph.subgraph(i))

def biggest_cluster(clusters):
    biggest = 0
    for i in range(len(clusters)):
        if len(clusters[i]) > len(clusters[biggest]):
            biggest = i
    
    return biggest
    



G = nx.complete_graph(6)
for edge in G.edges():
    G[edge[0]][edge[1]]['weight'] = 3

A = [[0, 985.5, 927.0, 1476.0, 2205.0, 2578.5, 2686.5, 3339.0, 4144.5, 2056.5], 
     [985.5, 0, 1512.0, 621.0, 1386.0, 1764.0, 1710.0, 4104.0, 3181.5, 1192.5], 
     [927.0, 1516.5, 0, 2169.0, 3051.0, 3379.5, 3127.5, 3231.0, 3933.0, 2695.5], 
     [1471.5, 625.5, 2142.0, 0, 774.0, 1152.0, 1233.0, 4765.5, 2830.5, 598.5], 
     [2209.5, 1390.5, 3042.0, 774.0, 0, 450.0, 679.5, 5499.0, 2223.0, 459.0], 
     [2578.5, 1759.5, 3366.0, 1143.0, 445.95, 0, 567.0, 5868.0, 2110.5, 778.5], 
     [2686.5, 1714.5, 3123.0, 1237.5, 684.0, 513.0, 0, 5719.5, 1557.0, 670.5], 
     [3343.5, 4108.5, 3240.0, 4770.0, 5499.0, 5877.0, 5719.5, 0, 7123.5, 5292.0], 
     [4144.5, 3181.5, 3933.0, 2826.0, 2236.5, 2065.5, 1566.0, 7123.5, 0, 2263.5], 
     [2056.5, 1197.0, 2700.0, 607.5, 463.5, 792.0, 670.5, 5292.0, 2322.0, 0]]

B = [[0, 0.6052927501198254, 0.2920696526551144, 0.8694201991992955, 0.5453613988988885, 1.7271116977111962, 1.3176683867279657, 1.437273937490101, 1.0206370651718344, 1.7805276561747716], 
     [0.5106899144331327, 0, 0.9750778360888426, 0.6636390357200802, 1.0740687090640955, 1.0187180288004287, 1.2329742264856562, 1.7944828103497787, 0.8879880435077004, 1.4122047803836082], 
     [0.5641522541778387, 0.806829451425493, 0, 0.1701466549571109, 0.9037646498209759, 0.9999112525548683, 0.9602526047251387, 0.6988242314726342, 0.9986660257116157, 1.3095455679896801], 
     [0.5627543258603099, 1.124016899992, 0.9074663327797513, 0, 1.1199750567096907, 0.8877243641560351, 0.8812223298441755, 1.253865167028986, 1.3879715917548563, 1.2772273213098515], 
     [0.982962039509826, 0.8658917628176399, 0.8786182239880072, 0.9936906202236859, 0, 0.9623391676036367, 1.9071849027766232, 1.0148240805708513, 1.469650174374498, 1.3512945073758549], 
     [0.499608961612669, 0.5418147111703612, 0.9243132719531547, 0.6862345259366002, 1.426084809861572, 0, 1.390135733478341, 1.3512825201861358, 0.6934798308166579, 0.2896404324945854], 
     [1.1762479032636879, 0.9611723655392361, 1.1917200078189953, 1.0188322237887557, 0.8560828804654407, 0.9101328989998406, 0, 0.36098066204127155, 0.2725147154787605, 0.7274815075104368], 
     [1.0648553961017524, 1.6014697450707382, 0.29227478479853275, 1.1874642481729105, 1.7119148755086124, 1.0813522123003745, 0.34204880252269276, 0, 0.7880254704838652, 1.5271642312712812], 
     [0.7634563724504563, 0.6289498966953301, 0.33059406993403784, 1.717862050354159, 1.1157328859540319, 1.607572872035063, 0.8432232858395238, 0.9868003397908581, 0, 1.2689707393643306], 
     [0.5881317660370339, 0.9723712309052815, 0.7768978848308343, 0.8678501252777409, 0.4702785416330044, 0.6550522148102873, 0.9805599599602454, 1.133743488856709, 1.1445068574464576, 0]]

C = [[0, 1478.8552927501198, 1390.792069652655, 2214.8694201991993, 3308.045361398899, 3869.4771116977113, 4031.0676683867277, 5009.93727393749, 6217.770637065172, 3086.530527656175], 
     [1478.7606899144332, 0, 2268.975077836089, 932.16363903572, 2080.0740687090642, 2647.0187180288003, 2566.2329742264856, 6157.79448281035, 4773.137988043508, 1790.1622047803837], 
     [1391.0641522541778, 2275.5568294514255, 0, 3253.670146654957, 4577.403764649821, 5070.249911252555, 4692.210252604725, 4847.198824231473, 5900.498666025712, 4044.5595455679895], 
     [2207.81275432586, 939.374016899992, 3213.9074663327797, 0, 1162.1199750567098, 1728.887724364156, 1850.3812223298441, 7149.503865167029, 4247.137971591755, 899.0272273213099], 
     [3315.23296203951, 2086.6158917628177, 4563.878618223988, 1161.9936906202238, 0, 675.9623391676037, 1021.1571849027766, 8249.51482408057, 3335.9696501743747, 689.8512945073759], 
     [3868.2496089616125, 2639.7918147111704, 5049.924313271953, 1715.1862345259367, 670.3510848098615, 0, 851.8901357334784, 8803.351282520187, 3166.4434798308166, 1168.0396404324945], 
     [4030.9262479032636, 2572.7111723655394, 4685.691720007819, 1857.2688322237886, 1026.8560828804655, 770.4101328989998, 0, 8579.61098066204, 2335.772514715479, 1006.4774815075104], 
     [5016.314855396102, 6164.351469745071, 4860.292274784799, 7156.187464248173, 8250.211914875508, 8816.5813522123, 8579.592048802522, 0, 10686.038025470483, 7939.527164231271], 
     [6217.5134563724505, 4772.878949896695, 5899.830594069934, 4240.717862050355, 3355.865732885954, 3099.8575728720352, 2349.8432232858395, 10686.236800339791, 0, 3396.5189707393642], 
     [3085.338131766037, 1796.4723712309053, 4050.7768978848308, 912.1178501252778, 695.720278541633, 1188.6550522148102, 1006.7305599599603, 7939.133743488856, 3484.1445068574462, 0]]

matrices = [A, B, C]
choice = int(input("Which path would you like to take:\n1. minimize cost\n2. minimize rise\n3. balance both factors: "))

G = nx.from_numpy_array(np.matrix(matrices[choice-1]), create_using=nx.DiGraph)
layout = nx.spring_layout(G)
#print(layout)
nx.draw(G, layout)
nx.draw_networkx_edge_labels(G, pos=layout)
plt.show()
#print(nx.to_numpy_array(G))

routes = list(main(G))
risk_factor, cost_factor = 0, 0
for route in routes:
    for i in range(len(route) - 1):
            j = i+1
            cost_factor += A[i][j]
            if B[i][j] > risk_factor:
                risk_factor = B[i][j]

if choice == 1:
    print("Risk factor for this route is ", risk_factor)
elif choice == 2: 
    print("Total cost of this route is ", cost_factor)


